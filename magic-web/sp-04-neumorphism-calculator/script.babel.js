import Vue from"https://cdn.staticfile.org/vue/2.6.11/vue.esm.browser.js";new Vue({el:"#calculator",data:{expression:"0",isCalculated:false},computed:{result:function result(){return this.error?"\u4E0D\u80FD\u9664\u4EE50":this.expression.replace(/\d+(\.\d*)?/g,function(match){return match.replace(/(?<=^\d+)(?=(\d{3})+(\.\d*)?$)/g,",")})},error:function error(){return /Infinity|NaN/.test(this.expression)}},methods:{clear:function clear(){this.expression="0"},toggleSign:function toggleSign(){var _this=this;if(/\d/.test(this.expression.slice(-1))){this.expression=this.expression.replace(/((?<=[×÷])|\+|-|^)\d+(\.\d*)?$|[+\-]?\d(\.\d+)?e-?\d+$/,function(match){return _this.computer(match+"*-1").replace(/^(?=\d)/,"+")}).replace(/(^|(?<=[×÷]))\+/,"")}},percentage:function percentage(){var _this2=this;if(/\d/.test(this.expression.slice(-1))){this.expression=this.expression.replace(/(?<=[+\-×÷]|^)\d+(\.\d*)?$|\d(\.\d+)?e-?\d+$/,function(match){return _this2.computer(match+"*0.01")})}},append:function append(character){this.error&&this.clear();if(character===0){if(!/(^|[+\-×÷])0$/.test(this.expression)){this.expression+="0"}}else if(/[1-9]/.test(character)){if(this.expression==="0"||this.isCalculated){this.expression=character+"";this.isCalculated=false}else{this.expression+=character}}else if(/[+\-×÷]/.test(character)){this.isCalculated=false;if(/[+\-×÷]/.test(this.expression.slice(-1))){this.expression=this.expression.slice(0,-1)+character}else{this.expression+=character}}else if(character==="."){if(/(^|[+\-×÷])\d+$/.test(this.expression)){this.isCalculated=false;this.expression+="."}else if(/[+\-×÷]/.test(this.expression.slice(-1))){this.expression+="0."}}},calculate:function calculate(){if(/[\d.]/.test(this.expression.slice(-1))){this.expression=this.computer(this.expression);this.isCalculated=true}},computer:function computer(expression){return new Function("return ".concat(expression.replace(/×/g,"*").replace(/÷/g,"/")))().toFixed(10)-0+""}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJWdWUiLCJlbCIsImRhdGEiLCJleHByZXNzaW9uIiwiaXNDYWxjdWxhdGVkIiwiY29tcHV0ZWQiLCJyZXN1bHQiLCJlcnJvciIsInJlcGxhY2UiLCJtYXRjaCIsInRlc3QiLCJtZXRob2RzIiwiY2xlYXIiLCJ0b2dnbGVTaWduIiwic2xpY2UiLCJjb21wdXRlciIsInBlcmNlbnRhZ2UiLCJhcHBlbmQiLCJjaGFyYWN0ZXIiLCJjYWxjdWxhdGUiLCJGdW5jdGlvbiIsInRvRml4ZWQiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU9BLENBQUFBLEdBQVAsS0FBZ0IsMERBQWhCLENBRUEsR0FBSUEsQ0FBQUEsR0FBSixDQUFRLENBQ0pDLEVBQUUsQ0FBRSxhQURBLENBRUpDLElBQUksQ0FBRSxDQUNGQyxVQUFVLENBQUUsR0FEVixDQUVGQyxZQUFZLENBQUUsS0FGWixDQUZGLENBTUpDLFFBQVEsQ0FBRSxDQUNOQyxNQURNLGtCQUNHLENBQ0wsTUFBTyxNQUFLQyxLQUFMLENBQ0QsMkJBREMsQ0FFRCxLQUFLSixVQUFMLENBQWdCSyxPQUFoQixDQUF3QixjQUF4QixDQUF3QyxTQUFBQyxLQUFLLFFBQ3pDQSxDQUFBQSxLQUFLLENBQUNELE9BQU4sQ0FBYyxpQ0FBZCxDQUFpRCxHQUFqRCxDQUR5QyxDQUE3QyxDQUdULENBUEssQ0FRTkQsS0FSTSxpQkFRRSxDQUNKLE1BQU8sZ0JBQWVHLElBQWYsQ0FBb0IsS0FBS1AsVUFBekIsQ0FDVixDQVZLLENBTk4sQ0FrQkpRLE9BQU8sQ0FBRSxDQUNMQyxLQURLLGlCQUNHLENBQ0osS0FBS1QsVUFBTCxDQUFrQixHQUNyQixDQUhJLENBSUxVLFVBSkssc0JBSVEsZ0JBQ1QsR0FBSSxLQUFLSCxJQUFMLENBQVUsS0FBS1AsVUFBTCxDQUFnQlcsS0FBaEIsQ0FBc0IsQ0FBQyxDQUF2QixDQUFWLENBQUosQ0FBMEMsQ0FDdEMsS0FBS1gsVUFBTCxDQUFrQixLQUFLQSxVQUFMLENBQ2JLLE9B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RixFQUEyRixDQUEzRixDQUErRixFQUN6RyxDQXpESSxDQWxCTCxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICdodHRwczovL2Nkbi5zdGF0aWNmaWxlLm9yZy92dWUvMi42LjExL3Z1ZS5lc20uYnJvd3Nlci5qcyc7XHJcblxyXG5uZXcgVnVlKHtcclxuICAgIGVsOiAnI2NhbGN1bGF0b3InLFxyXG4gICAgZGF0YToge1xyXG4gICAgICAgIGV4cHJlc3Npb246ICcwJyxcclxuICAgICAgICBpc0NhbGN1bGF0ZWQ6IGZhbHNlLFxyXG4gICAgfSxcclxuICAgIGNvbXB1dGVkOiB7XHJcbiAgICAgICAgcmVzdWx0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvclxyXG4gICAgICAgICAgICAgICAgPyAn5LiN6IO96Zmk5LulMCdcclxuICAgICAgICAgICAgICAgIDogdGhpcy5leHByZXNzaW9uLnJlcGxhY2UoL1xcZCsoXFwuXFxkKik/L2csIG1hdGNoID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICBtYXRjaC5yZXBsYWNlKC8oPzw9XlxcZCspKD89KFxcZHszfSkrKFxcLlxcZCopPyQpL2csICcsJylcclxuICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVycm9yKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gL0luZmluaXR5fE5hTi8udGVzdCh0aGlzLmV4cHJlc3Npb24pO1xyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgIGNsZWFyKCkge1xyXG4gICAgICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSAnMCc7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0b2dnbGVTaWduKCkge1xyXG4gICAgICAgICAgICBpZiAoL1xcZC8udGVzdCh0aGlzLmV4cHJlc3Npb24uc2xpY2UoLTEpKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uID0gdGhpcy5leHByZXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLygoPzw9W8OXw7ddKXxcXCt8LXxeKVxcZCsoXFwuXFxkKik/JHxbK1xcLV0/XFxkKFxcLlxcZCspP2UtP1xcZCskLywgbWF0Y2ggPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wdXRlcihtYXRjaCArICcqLTEnKS5yZXBsYWNlKC9eKD89XFxkKS8sICcrJylcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyhefCg/PD1bw5fDt10pKVxcKy8sICcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGVyY2VudGFnZSgpIHtcclxuICAgICAgICAgICAgaWYgKC9cXGQvLnRlc3QodGhpcy5leHByZXNzaW9uLnNsaWNlKC0xKSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IHRoaXMuZXhwcmVzc2lvbi5yZXBsYWNlKC8oPzw9WytcXC3Dl8O3XXxeKVxcZCsoXFwuXFxkKik/JHxcXGQoXFwuXFxkKyk/ZS0/XFxkKyQvLCBtYXRjaCA9PlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHV0ZXIobWF0Y2ggKyAnKjAuMDEnKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXBwZW5kKGNoYXJhY3Rlcikge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yICYmIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEvKF58WytcXC3Dl8O3XSkwJC8udGVzdCh0aGlzLmV4cHJlc3Npb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uICs9ICcwJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICgvWzEtOV0vLnRlc3QoY2hhcmFjdGVyKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXhwcmVzc2lvbiA9PT0gJzAnIHx8IHRoaXMuaXNDYWxjdWxhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uID0gY2hhcmFjdGVyICsgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0NhbGN1bGF0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uICs9IGNoYXJhY3RlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICgvWytcXC3Dl8O3XS8udGVzdChjaGFyYWN0ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzQ2FsY3VsYXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKC9bK1xcLcOXw7ddLy50ZXN0KHRoaXMuZXhwcmVzc2lvbi5zbGljZSgtMSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uID0gdGhpcy5leHByZXNzaW9uLnNsaWNlKDAsIC0xKSArIGNoYXJhY3RlcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uICs9IGNoYXJhY3RlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09ICcuJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKC8oXnxbK1xcLcOXw7ddKVxcZCskLy50ZXN0KHRoaXMuZXhwcmVzc2lvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ2FsY3VsYXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbiArPSAnLic7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9bK1xcLcOXw7ddLy50ZXN0KHRoaXMuZXhwcmVzc2lvbi5zbGljZSgtMSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uICs9ICcwLic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGNhbGN1bGF0ZSgpIHtcclxuICAgICAgICAgICAgaWYgKC9bXFxkLl0vLnRlc3QodGhpcy5leHByZXNzaW9uLnNsaWNlKC0xKSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IHRoaXMuY29tcHV0ZXIodGhpcy5leHByZXNzaW9uKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNDYWxjdWxhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29tcHV0ZXIoZXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKGByZXR1cm4gJHtleHByZXNzaW9uLnJlcGxhY2UoL8OXL2csICcqJykucmVwbGFjZSgvw7cvZywgJy8nKX1gKSgpLnRvRml4ZWQoMTApIC0gMCArICcnO1xyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59KTtcclxuIl19